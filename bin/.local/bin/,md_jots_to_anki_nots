#!/usr/bin/env python3

"""Convert Markdown chunks to HTML for importing into Anki, preserving formatting."""
import argparse
import subprocess
import sys


def convert_markdown_to_html(markdown_text):
    """Convert Markdown to HTML."""
    # if the chunk is a blank line, don't write it
    if not markdown_text.strip():
        return ""
    try:
        input_bytes = markdown_text.encode("utf-8")
        result = subprocess.run(
            ["pandoc", "-f", "markdown-auto_identifiers", "-t", "html", "--wrap=none"],
            input=input_bytes,
            capture_output=True,
            check=True,
        )
        result = result.stdout.decode("utf-8")
        # remove newlines and extra whitespace
        clean_result = result.strip().replace("\n", "<br>")
        # escape double quotes https://docs.ankiweb.net/importing/text-files.html
        clean_result = clean_result.replace('"', '""')
        return f'"{clean_result}"'

    except subprocess.CalledProcessError as e:
        print(f"Error converting Markdown to HTML: {e}", file=sys.stderr)
        return markdown_text


def process_file(input_file, output_file):
    """Process the input file, handling chunks."""
    with open(input_file, "r", encoding="utf-8") as infile, open(
        output_file, "w", encoding="utf-8"
    ) as outfile:
        current_chunk = []
        for line in infile:
            if line.strip() == "[[":
                # Start of a new chunk
                if current_chunk:
                    # Process and write the previous chunk
                    converted_chunk = convert_markdown_to_html("".join(current_chunk))
                    # do not write the chunk if it is only whitespace
                    if converted_chunk.strip():
                        outfile.write(f"\n{converted_chunk}")
                    current_chunk = []
            elif line.strip() == "]]":
                # End of the current chunk
                if current_chunk:
                    # Process and write the current chunk
                    converted_chunk = convert_markdown_to_html("".join(current_chunk))
                    outfile.write(f"{converted_chunk}\n")
                    current_chunk = []
            else:
                # Add the line to the current chunk
                current_chunk.append(line)


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Convert Markdown chunks to HTML, preserving <div> wraps."
    )
    parser.add_argument("input_file", help="Input file path")
    parser.add_argument(
        "-o",
        "--output_file",
        help="Output file path (default: input_file.anki-html.txt)",
        required=False,
    )
    args = parser.parse_args()

    # if the output file wasn't specified, use the input file name with .anki-html.txt extension
    if not args.output_file:
        args.output_file = args.input_file.replace(".md", ".anki-html.txt")

    process_file(args.input_file, args.output_file)
    print(f"Conversion complete. Output written to {args.output_file}")


if __name__ == "__main__":
    main()
